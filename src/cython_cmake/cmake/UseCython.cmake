#.rst:
#
# The following functions are defined:
#
# .. cmake:command:: Cython_compile_pyx
#
# Create custom rules to generate the source code for a Python extension module
# using cython.
#
#   Cython_compile_pyx(<pyx_file1> [<pyx_file2> ...]
#                     [LANGUAGE C | CXX]
#                     [CYTHON_ARGS <args> ...]
#                     [OUTPUT_VARIABLE <OutputVariable>])
#
# Options:
#
# ``LANGUAGE [C | CXX]``
#   Force the generation of either a C or C++ file. By default, a C file is
#   generated, unless the C language is not enabled for the project; in this
#   case, a C++ file is generated by default.
#
# ``CYTHON_ARGS <args>``
#   Specify additional arguments for the cythonization process. Will default to
#   the ``CYTHON_ARGS`` variable if not specified.
#
# ``OUTPUT_VARIABLE <OutputVariable>``
#   Set the variable ``<OutputVariable>`` in the parent scope to the path to the
#   generated source file.  By default, ``<Name>`` is used as the output
#   variable name.
#
# Defined variables:
#
# ``<OutputVariable>``
#   The path of the generated source file.
#
# Usage example:
#
# .. code-block:: cmake
#
#   find_package(Cython)
#   include(UseCython)
#
#   Cython_compile_pyx(_hello.pyx
#     OUTPUT_VARIABLE _hello_source_files
#   )
#
#   Python_add_library(_hello
#     MODULE ${_hello_source_files}
#     WITH_SOABI
#   )
#
#
#=============================================================================
# Copyright 2011 Kitware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=============================================================================

if(CMAKE_VERSION VERSION_LESS "3.7")
  message(SEND_ERROR "CMake 3.7 required for DEPFILE")
endif()

function(Cython_compile_pyx)
  set(_options )
  set(_one_value LANGUAGE OUTPUT_VARIABLE)
  set(_multi_value CYTHON_ARGS)

  cmake_parse_arguments(_args
    "${_options}"
    "${_one_value}"
    "${_multi_value}"
    ${ARGN}
    )

  if(DEFINED CYTHON_EXECUTABLE)
    set(_cython_command "${CYTHON_EXECUTABLE}")
  elseif(DEFINED Python_EXECUTABLE)
    set(_cython_command "${Python_EXECUTABLE}" -m cython)
  elseif(DEFINED Python3_EXECUTABLE)
    set(_cython_command "${Python3_EXECUTABLE}" -m cython)
  else()
    message(FATAL_ERROR "Cython executable not found")
  endif()

  # Default to CYTHON_ARGS if argument not specified
  if(NOT _args_CYTHON_ARGS AND DEFINED CYTHON_ARGS)
    set(_args_CYTHON_ARGS "${CYTHON_ARGS}")
  endif()

  # Get source file location
  set(_source_files ${_args_UNPARSED_ARGUMENTS})

  # Set target language
  get_property(_languages GLOBAL PROPERTY ENABLED_LANGUAGES)
  set(_language ${_args_LANGUAGE})
  if(NOT _language)
    if("C" IN_LIST _languages)
      set(_language "C")
    elseif("CXX" IN_LIST _languages)
      set(_language "CXX")
    endif()
  else()
    if(NOT _language MATCHES "^(C|CXX)$")
      message(FATAL_ERROR "LANGUAGE must be one of C or CXX")
    endif()
  endif()

  set(_language_C_arg "")
  set(_language_C_extension "c")
  set(_language_CXX_arg "--cplus")
  set(_language_CXX_extension "cxx")

  set(_language_arg ${_language_${_language}_arg})
  set(_language_extension ${_language_${_language}_extension})

  set(generated_files)

  foreach(_source_file IN LISTS _source_files)

    # Can use cmake_path for CMake 3.20+
    # cmake_path(GET _source_file STEM _name)
    get_filename_component(_name "${_source_file}" NAME_WE)

    set(generated_file "${CMAKE_CURRENT_BINARY_DIR}/${_name}.${_language_extension}")
    set_source_files_properties(${generated_file} PROPERTIES GENERATED TRUE)

    # Generated depfile is expected to have the ".dep" extension and be located along
    # side the generated source file.
    set(_depfile ${generated_file}.dep)
    set(_depfile_arg "-M")

    file(RELATIVE_PATH generated_file_relative
        ${CMAKE_BINARY_DIR} ${generated_file})

    set(comment "Generating ${_language} source ${generated_file_relative}")

    get_source_file_property(pyx_location ${_source_file} LOCATION)

    # Add the command to run the compiler.
    add_custom_command(
      OUTPUT ${generated_file}
      COMMAND
        ${_cython_command}
      ARGS
        ${_language_arg}
        ${_args_CYTHON_ARGS}
        ${_depfile_arg}
        ${pyx_location}
        --output-file ${generated_file}
      DEPENDS
        ${_source_file}
      DEPFILE
        ${_depfile}
      VERBATIM
      COMMENT ${comment}
    )
    list(APPEND generated_files ${generated_file})
  endforeach()

  if(_args_OUTPUT_VARIABLE)
    set(_output_variable ${_args_OUTPUT_VARIABLE})
    set(${_output_variable} ${generated_files} PARENT_SCOPE)
  endif()

endfunction()
